tag.0.documentation=<p style="font-weight: bold; font-size: 1.2em">@object:nodename</p>\n<p style="font-weight: bold; font-size: 1.1em">Description</p>\n<p>Defines the root node name. The default is the full name including the namespace.</p>\n<p style="font-weight: bold; font-size: 1.1em">Example</p>\n<pre><code>\n/**\n * @object:nodename OtherName\n */\nclass MyClass\n{ \n    // ...\n}\n</code></pre>\n
tag.0.insertTemplate=@object:nodename ${value}
tag.0.name=object:nodename (byjg/anydataset)
tag.0.types=TYPE,FIELD,METHOD
tag.1.documentation=<p style="font-weight: bold; font-size: 1.2em">@object:getter</p>\n<p style="font-weight: bold; font-size: 1.1em">Description</p>\n<p>Defines the prefix name of the getter method. The default prefix is 'get'.</p>\n<p style="font-weight: bold; font-size: 1.1em">Example</p>\n<pre><code>\n/**\n * @object:getter obtenir\n */\nclass MyClass\n{ \n    protected $unePropriete\n\n    public function obtenirUnePropriete()\n    {\n        // ...\n    }\n}\n</code></pre>\n
tag.1.insertTemplate=@object:getter ${value1}
tag.1.name=object:getter (byjg/anydataset)
tag.1.types=TYPE
tag.10.documentation=<p style="font-weight: bold; font-size: 1.2em">@object:dontcreatenode</p>\n<p style="font-weight: bold; font-size: 1.1em">Description</p>\n<p>Do not create the class node and all properties will be rendered in the parent node.</p>\n<p style="font-weight: bold; font-size: 1.1em">Example</p>\n<pre><code>\n/**\n * @object:dontcreatenode\n */\nclass MyClass\n{\n    // ...\n}\n</code></pre>\n
tag.10.insertTemplate=@object:dontcreatenode
tag.10.name=object:dontcreatenode (byjg/anydataset)
tag.10.types=TYPE,FIELD,METHOD
tag.11.documentation=<p style="font-weight: bold; font-size: 1.2em">@object:isattributeof</p>\n<p style="font-weight: bold; font-size: 1.1em">Description</p>\n<p>Defines that this property is an attribute of the 'propertyname' instead a node name.</p>\n<p style="font-weight: bold; font-size: 1.1em">Example</p>\n<pre><code>\nclass MyClass\n{\n    public $prop1;\n\n    /**\n     * @object:isattributeof prop1\n     */\n    public $prop2;\n}\n</code></pre>\n
tag.11.insertTemplate=@object:isattributeof ${value1}
tag.11.name=object:isattributeof (byjg/anydataset)
tag.11.types=TYPE,FIELD,METHOD
tag.12.documentation=<p style="font-weight: bold; font-size: 1.2em">@object:isclassattribute</p>\n<p style="font-weight: bold; font-size: 1.1em">Description</p>\n<p>This <code>@sample</code> annotation shows how to properly write documentation.</p>\n<p style="font-weight: bold; font-size: 1.1em">Example</p>\n<pre><code>\nclass MyClass\n{\n    protected $prop1;\n\n    /**\n     * @object:isclassattribute\n     */\n    public function getProp1() {\n        //  ...\n    }\n</code></pre>\n
tag.12.insertTemplate=@object:isclassattribute
tag.12.name=object:isclassattribute (byjg/anydataset)
tag.12.types=FIELD,METHOD
tag.13.documentation=<p style="font-weight: bold; font-size: 1.2em">@object:isblanknode</p>\n<p style="font-weight: bold; font-size: 1.1em">Description</p>\n<p><i>(applied only to @object:doctype rdf)</i></p>\n<p style="font-weight: bold; font-size: 1.1em">Example</p>\n<pre><code>\n// TODO\n</code></pre>\n
tag.13.insertTemplate=@object:isblanknode ${value1}
tag.13.name=object:isblanknode (byjg/anydataset)
tag.13.types=FIELD,METHOD
tag.14.documentation=<p style="font-weight: bold; font-size: 1.2em">@object:isresourceuri</p>\n<p style="font-weight: bold; font-size: 1.1em">Description</p>\n<p>Requires @object:isblanknode</p>\n<p><i>(applied only to @object:doctype rdf)</i></p>\n<p style="font-weight: bold; font-size: 1.1em">Example</p>\n<pre><code>\n// TODO\n</code></pre>\n
tag.14.insertTemplate=@object:isresourceuri
tag.14.name=object:isresourceuri (byjg/anydataset)
tag.14.types=FIELD,METHOD
tag.2.documentation=<p style="font-weight: bold; font-size: 1.2em">@object:writeempty</p>\n<p style="font-weight: bold; font-size: 1.1em">Description</p>\n<p>Xmlnuke by default does not write empty properties. You can change this setting true in this annotation.</p>\n<p style="font-weight: bold; font-size: 1.1em">Example</p>\n<pre><code>\n// TODO\n</code></pre>\n
tag.2.insertTemplate=@object:writeempty true
tag.2.name=object:writeempty (byjg/anydataset)
tag.2.types=TYPE
tag.3.documentation=<p style="font-weight: bold; font-size: 1.2em">@object:propertypattern</p>\n<p style="font-weight: bold; font-size: 1.1em">Description</p>\n<p>Defines how the name of the property will match with the getter method.</p>\n<p>The default property pattern removes special chars using only letters and numbers. The example bellow show how a property name matches with your proper getter.</p>\n<p style="font-weight: bold; font-size: 1.1em">Example</p>\n<pre><code>\n/**\n * @object:propertypattern /([^a-zA-Z0-9])/,\n */\nclass MyClass\n{\n    protected $_my_property;\n\n    // Enable getMyProperty matches with _my_property\n    public function getMyProperty() ...\n}\n</code></pre>\n
tag.3.insertTemplate=@object:propertypattern ${value}
tag.3.name=object:propertypattern (byjg/anydataset)
tag.3.types=TYPE
tag.4.documentation=<p style="font-weight: bold; font-size: 1.2em">@object:doctype</p>\n<p style="font-weight: bold; font-size: 1.1em">Description</p>\n<p>Defines if the class will be render as XML or RDF. Note that 'xml' is the default option and enables produces JSON as output.</p>\n<p style="font-weight: bold; font-size: 1.1em">Example</p>\n<pre><code>\n// TODO\n</code></pre>\n
tag.4.insertTemplate=@object:doctype ${value1}
tag.4.name=object:doctype (byjg/anydataset)
tag.4.types=TYPE
tag.5.documentation=<p style="font-weight: bold; font-size: 1.2em">@object:rdftype</p>\n<p style="font-weight: bold; font-size: 1.1em">Description</p>\n<p>Defines the RDF type generated by this class. It is possible use two vars\n<ul>\n    <li>{HOST} - The host name</li>\n    <li>{CLASS} - The class name</li>\n</ul></p>\n<p style="font-weight: bold; font-size: 1.1em">Example</p>\n<pre><code>\n/**\n * @object:rdftype {HOST}/rdf/class/{CLASS}\n */\nclass MyClass\n{\n    // ...\n}\n</code></pre>\n
tag.5.insertTemplate=@object:rdftype ${value1}
tag.5.name=object:rdftype (byjg/anydataset)
tag.5.types=TYPE
tag.6.documentation=<p style="font-weight: bold; font-size: 1.2em">@object:rdfabout</p>\n<p style="font-weight: bold; font-size: 1.1em">Description</p>\n<p>To do</p>\n<p style="font-weight: bold; font-size: 1.1em">Example</p>\n<pre><code>\n/**\n * @object:rdfabout {HOST}/rdf/instance/{CLASS}/{GetID()}\n */\nclass MyClass\n{\n    // ...\n}\n</code></pre>\n
tag.6.insertTemplate=@object:rdfabout ${value1}
tag.6.name=object:rdfabout (byjg/anydataset)
tag.6.types=TYPE
tag.7.documentation=<p style="font-weight: bold; font-size: 1.2em">@object:defaultprefix</p>\n<p style="font-weight: bold; font-size: 1.1em">Description</p>\n<p>Defines a default prefix to be added do the property name. By default there is not prefix on node names. Use this with <code>@object:namespace</code>.</p>\n<p style="font-weight: bold; font-size: 1.1em">Example</p>\n<pre><code>\n/**\n * @object:defaultprefix prefix\n */\nclass MyClass\n{\n    // ...\n}\n</code></pre>\n
tag.7.insertTemplate=@object:defaultprefix ${value1}
tag.7.name=object:defaultprefix (byjg/anydataset)
tag.7.types=TYPE
tag.8.documentation=<p style="font-weight: bold; font-size: 1.2em">@object:ignore</p>\n<p style="font-weight: bold; font-size: 1.1em">Description</p>\n<p>If this parameter is setted all class or property will ignored and will not be rendered.</p>\n<p style="font-weight: bold; font-size: 1.1em">Example</p>\n<pre><code>\n/**\n * @object:ignore\n */\nclass MyClass\n{\n    // ...\n}\n</code></pre>\n
tag.8.insertTemplate=@object:ignore
tag.8.name=object:ignore (byjg/anydataset)
tag.8.types=TYPE,FIELD,METHOD
tag.9.documentation=<p style="font-weight: bold; font-size: 1.2em">@object:namespace</p>\n<p style="font-weight: bold; font-size: 1.1em">Description</p>\n<p>Defines the namespaces of the properties and objects. If the property name has a namespace prefix this option is mandatory.</p>\n<p style="font-weight: bold; font-size: 1.1em">Example</p>\n<pre><code>\n/**\n * @object:namespace prefix!uri\n */\nclass MyClass\n{\n    // ..\n}\n</code></pre>\n
tag.9.insertTemplate=@object:namespace ${value1}!${value2}
tag.9.name=object:namespace (byjg/anydataset)
tag.9.types=TYPE
